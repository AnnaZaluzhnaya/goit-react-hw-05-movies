{"version":3,"file":"static/js/222.cf5c35b1.chunk.js","mappings":"oQACA,GAAgB,UAAY,0BAA0B,WAAa,2BAA2B,YAAc,4BAA4B,aAAe,6BAA6B,iBAAmB,iCAAiC,WAAa,4B,SC8ErP,EArEe,WACX,OAAsCA,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,MAsBjB,OALAC,EAAAA,EAAAA,YAAU,WACNJ,IAASK,EAAAA,EAAAA,IAAiBL,GAAOM,MAAK,SAAAC,GAAK,OAAIX,EAAeW,QAChE,CAACP,KAIC,4BACI,gBAAKQ,UAAWC,EAAAA,UAAhB,UACJ,kBAAMD,UAAWC,EAAAA,WAAkBC,SAvBlB,SAAAC,GACjBA,EAAMC,iBACN,IAAMC,EAAaF,EAAMG,cACnBC,EAAQJ,EAAMK,OAAOC,SAASjB,MAAMe,MAAMG,cAEhDnB,EAAgB,CAACC,MAAOe,IACxBF,EAAWM,QAES,KAAjBJ,EAAMK,QACLC,IAAAA,OAAAA,QAAwB,uEAc5B,WACI,kBACAb,UAAWC,EAAAA,YACXa,KAAK,QACLC,KAAK,OACLC,YAAY,gBACZC,WAAS,KAET,mBAAQjB,UAAWC,EAAAA,aAAoBc,KAAK,SAA5C,UACA,2BACI,SAAC,MAAD,cAMR,0BACC5B,GAAeA,EAAY+B,QAAQC,KAAI,SAAApB,GAAK,OACzC,eAAIC,UAAWC,EAAAA,WAAf,UACI,SAAC,KAAD,CAAMD,UAAWC,EAAAA,iBAAuBmB,GAAE,kBAAarB,EAAMsB,IAC7DC,MAAO,CAAEC,KAAM7B,GADf,SAC4BK,EAAMyB,SAFDzB,EAAMsB,OAM9ClC,GAA6C,IAA9BA,EAAYsC,eAAwBZ,IAAAA,OAAAA,QAAwB,oD,yMC5D9Ea,EAAM,mCACNC,EAAW,+BAEJC,EAAiB,mCAAG,oGACRC,IAAAA,IAAA,UAAaF,EAAb,uCAAoDD,IAD5C,UAGP,OAFlBI,EADyB,QAGlBC,OAHkB,sBAIvB,IAAIC,MAAM,iBAJa,gCAOxBF,EAASG,MAPe,2CAAH,qDAUjBpC,EAAgB,mCAAG,WAAOiB,GAAP,uFACPe,IAAAA,IAAA,UAAaF,EAAb,iCAA8CD,EAA9C,yBAAkEZ,IAD3D,UAGN,OAFlBgB,EADwB,QAGjBC,OAHiB,sBAItB,IAAIC,MAAM,iBAJY,gCAOvBF,EAASG,MAPc,2CAAH,sDAWhBC,EAAiB,mCAAG,WAAOC,GAAP,uFACRN,IAAAA,IAAA,UAAaF,EAAb,kBAA+BQ,EAA/B,oBAAkDT,IAD1C,UAGP,OAFlBI,EADyB,QAGlBC,OAHkB,sBAIvB,IAAIC,MAAM,iBAJa,gCAOxBF,EAASG,MAPe,2CAAH,sDAUjBG,EAAiB,mCAAG,WAAOD,GAAP,uFACRN,IAAAA,IAAA,UAAaF,EAAb,kBAA+BQ,EAA/B,4BAA0DT,IADlD,UAGP,OAFlBI,EADyB,QAGlBC,OAHkB,sBAIvB,IAAIC,MAAM,iBAJa,gCAOxBF,EAASG,MAPe,2CAAH,sDAWjBI,EAAiB,mCAAG,WAAOF,GAAP,uFACRN,IAAAA,IAAA,UAAaF,EAAb,kBAA+BQ,EAA/B,4BAA0DT,IADlD,UAGP,OAFlBI,EADyB,QAGlBC,OAHkB,sBAIvB,IAAIC,MAAM,iBAJa,gCAOxBF,EAASG,MAPe,2CAAH","sources":["webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","services/moviesAPI.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Movies_searchbar__IBimh\",\"searchForm\":\"Movies_searchForm__J4-xw\",\"SearchInput\":\"Movies_SearchInput__RnpEG\",\"SearchButton\":\"Movies_SearchButton__fnOqk\",\"searchMoviesLink\":\"Movies_searchMoviesLink__-Nutj\",\"searchList\":\"Movies_searchList__acL74\"};","import { useState, useEffect } from 'react';\nimport Notiflix from 'notiflix';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { BiSearchAlt } from 'react-icons/bi';\nimport {showSearchMovies} from 'services/moviesAPI';\nimport PropTypes from 'prop-types';\nimport style from './Movies.module.css';\n\n\n\nconst Movies = () => {\n    const [searchМovie, setSearchМovie] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query');\n    const location = useLocation();\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        const valueInput = event.currentTarget;\n        const value = event.target.elements.query.value.toLowerCase();\n        \n        setSearchParams({query: value});\n        valueInput.reset();\n\n        if(value.trim() === ''){\n            Notiflix.Notify.failure(\"Please,check the correct spelling of the movie title and try again\");\n            return;\n        }\n\n    };\n\n    useEffect(() => {\n        query && showSearchMovies(query).then(movie => setSearchМovie(movie));\n    },[query]);\n\n    \n    return (\n        <div >\n            <div className={style.searchbar}>\n        <form className={style.searchForm} onSubmit={handleSubmit} >\n            <input\n            className={style.SearchInput}\n            name=\"query\"\n            type=\"text\"\n            placeholder=\"Search movies\"\n            autoFocus\n            />\n            <button className={style.searchButton} type=\"submit\" >\n            <span >\n                <BiSearchAlt/>\n            </span>\n            </button>\n        </form>\n        </div>\n        \n        <ul>\n        {searchМovie && searchМovie.results.map(movie => (\n            <li className={style.searchList}key={movie.id}>\n                <Link className={style.searchMoviesLink}to={`/movies/${movie.id}`}\n                state={{ from: location }}>{movie.title}\n                </Link>\n            </li>\n        ))}\n        {searchМovie && searchМovie.total_results === 0 && (Notiflix.Notify.warning(\"There are no movies matching your query!\"))}\n        </ul>\n        </div>\n    );\n};\n\nMovies.propTypes = {\n    movie: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n        }),\n    ),\n};\n\n\nexport default Movies;","\nimport axios from 'axios';\n\nconst KEY = 'b732e1e1afcd10d94706b0318ae2f23c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const showPopularMovies = async () => {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n  \n  if (response.status !== 200) {\n    throw new Error('Nothing found');\n  }\n\n  return response.data;\n};\n\nexport const showSearchMovies = async (name) => {\n  const response = await axios.get(`${BASE_URL}/search/movie?api_key=${KEY}&page=1&query=${name}`);\n  \n  if (response.status !== 200) {\n    throw new Error('Nothing found');\n  }\n\n  return response.data;\n    \n}\n\nexport const showMoviesDetails = async (movieId) => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${KEY}`);\n  \n  if (response.status !== 200) {\n    throw new Error('Nothing found');\n  }\n\n  return response.data;\n}\n\nexport const showMoviesCredits = async (movieId) => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`);\n  \n  if (response.status !== 200) {\n    throw new Error('Nothing found');\n  }\n\n  return response.data;\n  \n}\n\nexport const showMoviesReviews = async (movieId) => {\n  const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`);\n  \n  if (response.status !== 200) {\n    throw new Error('Nothing found');\n  }\n\n  return response.data;\n}\n\n"],"names":["useState","searchМovie","setSearchМovie","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","useEffect","showSearchMovies","then","movie","className","style","onSubmit","event","preventDefault","valueInput","currentTarget","value","target","elements","toLowerCase","reset","trim","Notiflix","name","type","placeholder","autoFocus","results","map","to","id","state","from","title","total_results","KEY","BASE_URL","showPopularMovies","axios","response","status","Error","data","showMoviesDetails","movieId","showMoviesCredits","showMoviesReviews"],"sourceRoot":""}